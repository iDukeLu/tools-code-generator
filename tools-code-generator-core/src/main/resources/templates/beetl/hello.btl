package ${config.apiPackage};

import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "${tag.name}", description = "${tag.description}")
@RestController
public class ${tag.name} {

<%for (entry in swagger.paths) {

    var path = entry.value;
    var getOperation = path.get;
    var postOperation = path.post;
    var putOperation = path.put;
    var deleteOperation = path.delete;
    var getParameters = getOperation.parameters;
    var postParameters = postOperation.parameters;
    var putParameters = putOperation.parameters;
    var deleteParameters = deleteOperation.parameters;

    if (getOperation != null && getOperation.tags[0] == tag.name) {%>
    @ApiOperation("${getOperation.summary!}")
    @GetMapping("${entry.key!}")
    public BookVO ${getOperation.operationId!}() {
        return bookService.${getOperation.operationId}(id);
    }

    <%}

    if (postOperation != null) {%>
    @ApiOperation("${postOperation.summary!}")
    @PostMapping("${entry.key!}")
    public BookVO ${postOperation.operationId!}(@PathVariable String id) {
        return bookService.${postOperation.operationId!}(id);
    }

    <%}

    if (putOperation != null) {%>
    @ApiOperation("${putOperation.summary!}")
    @PutMapping("${entry.key!}")
    public BookVO ${putOperation.operationId!}(@PathVariable String id) {
        return bookService.${putOperation.operationId!}(id);
    }

    <%}


}%>

}




--------



package ${config.apiPackage};

import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "${tag.name}", description = "${tag.description}")
@RestController
public class ${tag.name} {

<%for (entry in swagger.paths) {

    var path = entry.value;
    var getOperation = path.get;
    var postOperation = path.post;
    var putOperation = path.put;
    var deleteOperation = path.delete;

    if (getOperation != null && getOperation.tags[0] == tag.name) {%>
    @ApiOperation("${getOperation.summary!}")
    @GetMapping("${entry.key!}")
    public BookVO ${getOperation.operationId!}(<%
        for (parameter in getOperation.parameters) {
            if (parameter["in"] == "path") {
                var parameter.annotation = "@PathVariable";
                %>@PathVariable <%
            }
            if (parameter["in"] == "query") {
                %>@RequestParam <%
            }
            if (parameter.type == "integer" && parameter.format == "int32") {
                var parameter.type = "Integer";
                %>${parameter.type} <%
            }
        %>${parameter.name}<%
        }%>) {
        return bookService.${getOperation.operationId!}(<%for (parameter in getOperation.parameters) {%>${parameter.name}<%}%>);
    }

    <%}
}%>

}












package ${config.apiPackage};

import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "${tag.name}", description = "${tag.description}")
@RestController
public class ${tag.name} {
    <%
        var service = {class: "", name: ""};
        var servicePrefix = strutil.replace(tag.name,"Controller","");
        var serviceSuffix = "Service";
        var service.class = servicePrefix + serviceSuffix;
        var service.name = strutil.toLowerCase(servicePrefix) + serviceSuffix;
    %>

    @Autowired
    private ${service.class} ${service.name};

<%for (entry in openApi.paths) {

    var path = entry.value;
    var getOperation = path.get;
    var postOperation = path.post;
    var putOperation = path.put;
    var deleteOperation = path.delete;

    if (isNotEmpty(getOperation) && getOperation.tags[0] == tag.name) {%>
    @ApiOperation("${getOperation.summary!}")
    @GetMapping("${entry.key!}")
    public BookVO ${getOperation.operationId!}(<%
        if (isNotEmpty(getOperation.parameters)) {
            for (parameter in getOperation.parameters) {
                var param = {annotation: "", class: "", name: ""};
                var position = parameter["in"];
                var type = parameter.schema.type;
                var format = parameter.schema.format;
                param.name = parameter.name;

                if (position == "path") {
                    param.annotation = "@PathVariable";
                }
                if (position == "query") {
                    param.annotation = "@RequestParam";
                }
                if (type == "integer" && format == "int32") {
                    param.class = "Integer";
                }
                if (type == "integer" && format == "int64") {
                    param.class = "Long";
                }
                if (type == "number" && format == "float") {
                    param.class = "Float";
                }
                if (type == "number" && format == "double") {
                    param.class = "Double";
                }
                if (type == "boolean") {
                    param.class = "Boolean";
                }
                if (type == "string") {
                    param.class = "String";
                }
                %>${param.annotation!}<%

                if (isNotEmpty(param.annotation)) {
                    %> <%
                }
                %>${param.class!}<%
                if (isNotEmpty(param.class)) {
                    %> <%
                }
                %>${param.name!}<%
                if (!parameterLP.last) {
                    %>, <%
                }
            }
        }
        %>) {
        return ${service.name}.${getOperation.operationId!}(<%
            if (isNotEmpty(getOperation.parameters)) {
                for (parameter in getOperation.parameters) {
                    %>${parameter.name}<%
                    if (!parameterLP.last) {
                        %>, <%
                    }
                }
            }
            %>);
    }
    <%}
}%>

}