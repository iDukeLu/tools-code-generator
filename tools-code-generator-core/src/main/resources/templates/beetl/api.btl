package ${config.apiPackage};

import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "${tag.name!}", description = "${tag.description!}")
@RestController
public class ${tag.name!} {
<%
    var service = {class: "", name: ""};
    var servicePrefix = strutil.replace(tag.name,"Controller","");
    var serviceSuffix = "Service";
    var service.class = servicePrefix + serviceSuffix;
    var service.name = strutil.toLowerCase(servicePrefix) + serviceSuffix;
%>

    @Autowired
    private ${service.class} ${service.name};

<%for (entry in openApi.paths) {

    var path = entry.value;
    var getOperation = path.get;
    var postOperation = path.post;
    var putOperation = path.put;
    var deleteOperation = path.delete;

    // GET 请求
    if (isNotEmpty(getOperation) && getOperation.tags[0] == tag.name) {%>
    @ApiOperation("${getOperation.summary!}")
    @GetMapping("${entry.key!}")
    public BookVO ${getOperation.operationId!}(<%
        if (isNotEmpty(getOperation.parameters)) {
            for (parameter in getOperation.parameters) {
                var param = {annotation: "", class: "", name: ""};
                var items = {type: "", format: "", ref: ""};
                var position = parameter["in"];
                var schema = parameter.schema;
                var type = schema.type;
                var format = schema.format;
                var ref = schema.$ref;
                param.name = parameter.name;

                if (position == "path") {
                    param.annotation = "@PathVariable";
                }
                if (position == "query") {
                    param.annotation = "@RequestParam";
                }
                if (position == "header") {
                    param.annotation = "@RequestHeader";
                }
                if (position == "cookie") {
                    param.annotation = "@CookieValue";
                }
                if (isNotEmpty(getOperation.requestBody)) {
                    param.annotation = "@RequestBody";
                }
                if (type == "integer" && format == "int32") {
                    param.class = "Integer";
                }
                if (type == "integer" && format == "int64") {
                    param.class = "Long";
                }
                if (type == "number" && format == "float") {
                    param.class = "Float";
                }
                if (type == "number" && format == "double") {
                    param.class = "Double";
                }
                if (type == "string") {
                    param.class = "String";
                }
                if (type == "boolean") {
                    param.class = "Boolean";
                }
                if (type == "string" && format == "date") {
                    param.class = "Date";
                }
                if (isNotEmpty(ref)) {
                    param.class = strutil.replace (ref,"#/components/schemas/","");
                }
                if (type == "array") {
                    var arraySchema = json(schema);
                    var typeStart = strutil.lastIndex(arraySchema, "type") + strutil.length ("type") + 3;
                    var typeEnd = strutil.lastIndex(arraySchema, "not") - 3;
                    var formatStart = strutil.lastIndex(arraySchema, "format") + strutil.length ("format") + 3;
                    var formatEnd = strutil.lastIndex(arraySchema, "$ref") - 3;
                    var refStart = strutil.lastIndex(arraySchema, "$ref") + strutil.length ("$ref") + 3;
                    var refEnd = strutil.lastIndex(arraySchema, "nullable") - 3;
                    items.type = strutil.subStringTo (arraySchema, typeStart, typeEnd);
                    items.format = strutil.subStringTo (arraySchema, formatStart, formatEnd);
                    items.ref = strutil.subStringTo (arraySchema, refStart, refEnd);

                    if (items.type == "integer" && items.format == "int32") {
                        param.class = "Integer[]";
                    }
                    if (items.type == "integer" && items.format == "int64") {
                        param.class = "Long[]";
                    }
                    if (items.type == "number" && items.format == "float") {
                        param.class = "Float[]";
                    }
                    if (items.type == "number" && items.format == "double") {
                        param.class = "Double[]";
                    }
                    if (items.type == "string") {
                        param.class = "String[]";
                    }
                    if (items.type == "boolean") {
                        param.class = "Boolean[]";
                    }
                    if (items.type == "string" && items.format == "date") {
                        param.class = "Date[]";
                    }
                    if (isNotEmpty(items.ref) && items.ref != "ul") {
                        param.class = strutil.replace (ref,"#/components/schemas/","") + "[]";
                    }
                }
                %>${param.annotation!}<%
                if (isNotEmpty(param.annotation)) {
                    %> <%
                }
                %>${param.class!}<%
                if (isNotEmpty(param.class)) {
                    %> <%
                }
                %>${param.name!}<%
                if (!parameterLP.last) {
                    %>, <%
                }
            }
        }
        %>) {
        return ${service.name}.${getOperation.operationId!}(<%
            if (isNotEmpty(getOperation.parameters)) {
                for (parameter in getOperation.parameters) {
                    %>${parameter.name}<%
                    if (!parameterLP.last) {
                        %>, <%
                    }
                }
            }
            %>);
    }

    <%} // POST 请求
    if (isNotEmpty(postOperation) && postOperation.tags[0] == tag.name) {%>
    @ApiOperation("${postOperation.summary!}")
    @GetMapping("${entry.key!}")
    public BookVO ${postOperation.operationId!}(<%
        if (isNotEmpty(postOperation.parameters)) {
            for (parameter in postOperation.parameters) {
                var param = {annotation: "", class: "", name: ""};
                var items = {type: "", format: "", ref: ""};
                var position = parameter["in"];
                var schema = parameter.schema;
                var type = schema.type;
                var format = schema.format;
                var ref = schema.$ref;
                param.name = parameter.name;

                if (position == "path") {
                    param.annotation = "@PathVariable";
                }
                if (position == "query") {
                    param.annotation = "@RequestParam";
                }
                if (position == "header") {
                    param.annotation = "@RequestHeader";
                }
                if (position == "cookie") {
                    param.annotation = "@CookieValue";
                }
                if (isNotEmpty(postOperation.requestBody)) {
                    param.annotation = "@RequestBody";
                }
                if (type == "integer" && format == "int32") {
                    param.class = "Integer";
                }
                if (type == "integer" && format == "int64") {
                    param.class = "Long";
                }
                if (type == "number" && format == "float") {
                    param.class = "Float";
                }
                if (type == "number" && format == "double") {
                    param.class = "Double";
                }
                if (type == "string") {
                    param.class = "String";
                }
                if (type == "boolean") {
                    param.class = "Boolean";
                }
                if (type == "string" && format == "date") {
                    param.class = "Date";
                }
                if (isNotEmpty(ref)) {
                    param.class = strutil.replace (ref,"#/components/schemas/","");
                }
                if (type == "array") {
                    var arraySchema = json(schema);
                    var typeStart = strutil.lastIndex(arraySchema, "type") + strutil.length ("type") + 3;
                    var typeEnd = strutil.lastIndex(arraySchema, "not") - 3;
                    var formatStart = strutil.lastIndex(arraySchema, "format") + strutil.length ("format") + 3;
                    var formatEnd = strutil.lastIndex(arraySchema, "$ref") - 3;
                    var refStart = strutil.lastIndex(arraySchema, "$ref") + strutil.length ("$ref") + 3;
                    var refEnd = strutil.lastIndex(arraySchema, "nullable") - 3;
                    items.type = strutil.subStringTo (arraySchema, typeStart, typeEnd);
                    items.format = strutil.subStringTo (arraySchema, formatStart, formatEnd);
                    items.ref = strutil.subStringTo (arraySchema, refStart, refEnd);

                    if (items.type == "integer" && items.format == "int32") {
                        param.class = "Integer[]";
                    }
                    if (items.type == "integer" && items.format == "int64") {
                        param.class = "Long[]";
                    }
                    if (items.type == "number" && items.format == "float") {
                        param.class = "Float[]";
                    }
                    if (items.type == "number" && items.format == "double") {
                        param.class = "Double[]";
                    }
                    if (items.type == "string") {
                        param.class = "String[]";
                    }
                    if (items.type == "boolean") {
                        param.class = "Boolean[]";
                    }
                    if (items.type == "string" && items.format == "date") {
                        param.class = "Date[]";
                    }
                    if (isNotEmpty(items.ref) && items.ref != "ul") {
                        param.class = strutil.replace (ref,"#/components/schemas/","") + "[]";
                    }
                }
                %>${param.annotation!}<%
                if (isNotEmpty(param.annotation)) {
                    %> <%
                }
                %>${param.class!}<%
                if (isNotEmpty(param.class)) {
                    %> <%
                }
                %>${param.name!}<%
                if (!parameterLP.last) {
                    %>, <%
                }
            }
        }
        %>) {
        return ${service.name}.${postOperation.operationId!}(<%
            if (isNotEmpty(postOperation.parameters)) {
                for (parameter in postOperation.parameters) {
                    %>${parameter.name}<%
                    if (!parameterLP.last) {
                        %>, <%
                    }
                }
            }
            %>);
    }

    <%} // PUT 请求
    if (isNotEmpty(putOperation) && putOperation.tags[0] == tag.name) {%>
    @ApiOperation("${putOperation.summary!}")
    @PutMapping("${entry.key!}")
    public BookVO ${putOperation.operationId!}(<%
        if (isNotEmpty(putOperation.parameters)) {
            for (parameter in putOperation.parameters) {
                var param = {annotation: "", class: "", name: ""};
                var items = {type: "", format: "", ref: ""};
                var position = parameter["in"];
                var schema = parameter.schema;
                var type = schema.type;
                var format = schema.format;
                var ref = schema.$ref;
                param.name = parameter.name;

                if (position == "path") {
                    param.annotation = "@PathVariable";
                }
                if (position == "query") {
                    param.annotation = "@RequestParam";
                }
                if (position == "header") {
                    param.annotation = "@RequestHeader";
                }
                if (position == "cookie") {
                    param.annotation = "@CookieValue";
                }
                if (isNotEmpty(putOperation.requestBody)) {
                    param.annotation = "@RequestBody";
                }
                if (type == "integer" && format == "int32") {
                    param.class = "Integer";
                }
                if (type == "integer" && format == "int64") {
                    param.class = "Long";
                }
                if (type == "number" && format == "float") {
                    param.class = "Float";
                }
                if (type == "number" && format == "double") {
                    param.class = "Double";
                }
                if (type == "string") {
                    param.class = "String";
                }
                if (type == "boolean") {
                    param.class = "Boolean";
                }
                if (type == "string" && format == "date") {
                    param.class = "Date";
                }
                if (isNotEmpty(ref)) {
                    param.class = strutil.replace (ref,"#/components/schemas/","");
                }
                if (type == "array") {
                    var arraySchema = json(schema);
                    var typeStart = strutil.lastIndex(arraySchema, "type") + strutil.length ("type") + 3;
                    var typeEnd = strutil.lastIndex(arraySchema, "not") - 3;
                    var formatStart = strutil.lastIndex(arraySchema, "format") + strutil.length ("format") + 3;
                    var formatEnd = strutil.lastIndex(arraySchema, "$ref") - 3;
                    var refStart = strutil.lastIndex(arraySchema, "$ref") + strutil.length ("$ref") + 3;
                    var refEnd = strutil.lastIndex(arraySchema, "nullable") - 3;
                    items.type = strutil.subStringTo (arraySchema, typeStart, typeEnd);
                    items.format = strutil.subStringTo (arraySchema, formatStart, formatEnd);
                    items.ref = strutil.subStringTo (arraySchema, refStart, refEnd);

                    if (items.type == "integer" && items.format == "int32") {
                        param.class = "Integer[]";
                    }
                    if (items.type == "integer" && items.format == "int64") {
                        param.class = "Long[]";
                    }
                    if (items.type == "number" && items.format == "float") {
                        param.class = "Float[]";
                    }
                    if (items.type == "number" && items.format == "double") {
                        param.class = "Double[]";
                    }
                    if (items.type == "string") {
                        param.class = "String[]";
                    }
                    if (items.type == "boolean") {
                        param.class = "Boolean[]";
                    }
                    if (items.type == "string" && items.format == "date") {
                        param.class = "Date[]";
                    }
                    if (isNotEmpty(items.ref) && items.ref != "ul") {
                        param.class = strutil.replace (ref,"#/components/schemas/","") + "[]";
                    }
                }
                %>${param.annotation!}<%
                if (isNotEmpty(param.annotation)) {
                    %> <%
                }
                %>${param.class!}<%
                if (isNotEmpty(param.class)) {
                    %> <%
                }
                %>${param.name!}<%
                if (!parameterLP.last) {
                    %>, <%
                }
            }
        }
        %>) {
        return ${service.name}.${putOperation.operationId!}(<%
            if (isNotEmpty(putOperation.parameters)) {
                for (parameter in putOperation.parameters) {
                    %>${parameter.name}<%
                    if (!parameterLP.last) {
                        %>, <%
                    }
                }
            }
            %>);
    }

    <%} // DELETE 请求
    if (isNotEmpty(deleteOperation) && deleteOperation.tags[0] == tag.name) {%>
    @ApiOperation("${deleteOperation.summary!}")
    @DeleteMapping("${entry.key!}")
    public BookVO ${deleteOperation.operationId!}(<%
        if (isNotEmpty(deleteOperation.parameters)) {
            for (parameter in deleteOperation.parameters) {
                var param = {annotation: "", class: "", name: ""};
                var items = {type: "", format: "", ref: ""};
                var position = parameter["in"];
                var schema = parameter.schema;
                var type = schema.type;
                var format = schema.format;
                var ref = schema.$ref;
                param.name = parameter.name;

                if (position == "path") {
                    param.annotation = "@PathVariable";
                }
                if (position == "query") {
                    param.annotation = "@RequestParam";
                }
                if (position == "header") {
                    param.annotation = "@RequestHeader";
                }
                if (position == "cookie") {
                    param.annotation = "@CookieValue";
                }
                if (isNotEmpty(deleteOperation.requestBody)) {
                    param.annotation = "@RequestBody";
                }
                if (type == "integer" && format == "int32") {
                    param.class = "Integer";
                }
                if (type == "integer" && format == "int64") {
                    param.class = "Long";
                }
                if (type == "number" && format == "float") {
                    param.class = "Float";
                }
                if (type == "number" && format == "double") {
                    param.class = "Double";
                }
                if (type == "string") {
                    param.class = "String";
                }
                if (type == "boolean") {
                    param.class = "Boolean";
                }
                if (type == "string" && format == "date") {
                    param.class = "Date";
                }
                if (isNotEmpty(ref)) {
                    param.class = strutil.replace (ref,"#/components/schemas/","");
                }
                if (type == "array") {
                    var arraySchema = json(schema);
                    var typeStart = strutil.lastIndex(arraySchema, "type") + strutil.length ("type") + 3;
                    var typeEnd = strutil.lastIndex(arraySchema, "not") - 3;
                    var formatStart = strutil.lastIndex(arraySchema, "format") + strutil.length ("format") + 3;
                    var formatEnd = strutil.lastIndex(arraySchema, "$ref") - 3;
                    var refStart = strutil.lastIndex(arraySchema, "$ref") + strutil.length ("$ref") + 3;
                    var refEnd = strutil.lastIndex(arraySchema, "nullable") - 3;
                    items.type = strutil.subStringTo (arraySchema, typeStart, typeEnd);
                    items.format = strutil.subStringTo (arraySchema, formatStart, formatEnd);
                    items.ref = strutil.subStringTo (arraySchema, refStart, refEnd);

                    if (items.type == "integer" && items.format == "int32") {
                        param.class = "Integer[]";
                    }
                    if (items.type == "integer" && items.format == "int64") {
                        param.class = "Long[]";
                    }
                    if (items.type == "number" && items.format == "float") {
                        param.class = "Float[]";
                    }
                    if (items.type == "number" && items.format == "double") {
                        param.class = "Double[]";
                    }
                    if (items.type == "string") {
                        param.class = "String[]";
                    }
                    if (items.type == "boolean") {
                        param.class = "Boolean[]";
                    }
                    if (items.type == "string" && items.format == "date") {
                        param.class = "Date[]";
                    }
                    if (isNotEmpty(items.ref) && items.ref != "ul") {
                        param.class = strutil.replace (ref,"#/components/schemas/","") + "[]";
                    }
                }
                %>${param.annotation!}<%
                if (isNotEmpty(param.annotation)) {
                    %> <%
                }
                %>${param.class!}<%
                if (isNotEmpty(param.class)) {
                    %> <%
                }
                %>${param.name!}<%
                if (!parameterLP.last) {
                    %>, <%
                }
            }
        }
        %>) {
        return ${service.name}.${deleteOperation.operationId!}(<%
            if (isNotEmpty(deleteOperation.parameters)) {
                for (parameter in deleteOperation.parameters) {
                    %>${parameter.name}<%
                    if (!parameterLP.last) {
                        %>, <%
                    }
                }
            }
            %>);
    }

    <%}
}%>
}